{
	// Place your espace de travail GuanajuatoRP snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create Listener": {
		"scope": "javascript,typescript",
		"prefix": "NewEvent",
		"body": [
			"import { Event } from \"sheweny\"",
            "import type { ShewenyClient } from \"sheweny\"",
            "import type { TextChannel } from \"discord.js\"",
            "import { LogsEmbed } from \"../tools/export\"",
            "import lang from '../tools/language.json'",
            "const eventLang = lang.event",
            "import appConf from \"../util/appConfig.json\"",
            "",
            "export class $1 extends Event {",
            "    constructor(client: ShewenyClient) {",
            "        super(client, \"$2\", {",
            "            description: \"$3\",",
            "            once: false,",
            "        });",
            "    }",
            "",
            "    execute($4) {",
            "        console.log('EVENT');",
            "    }",
            "}"
		],
		"description": "Permet de crée un nouvel event"
	},
    "NewCommand": {
      "scope": "javascript,typescript",
		  "prefix": "NewCommand",
      "description": "Permet de crée une nouvelle commande",
      "body": [
        "import { Command } from 'sheweny';",
        "import type { ShewenyClient } from 'sheweny';",
        "import {",
        "    ApplicationCommandOptionType,",
        "    AutocompleteInteraction,",
        "    CommandInteraction,",
        "} from 'discord.js';",
        "import lang from '../../../../tools/language.json';",
        "const cmdLang = lang.commands.${2:CommandNamelowercase};",
        "import fs from 'fs';",
        "import { join } from 'path';",
        "",
        "export class ${1:ClassNamePascalCase}Command extends Command {",
        "    constructor(client: ShewenyClient) {",
        "    \tsuper(client, {",
        "    \t\tname: '${2:CommandNamelowercase}',",
        "    \t\tcategory: '', //* Default category is InDev",
        "    \t\t// type: '', //* Default type is SLASH_COMMAND",
        "    \t\tdescription: cmdLang.description.desc,",
        "    \t\tusage: cmdLang.description.usage,",
        "    \t\texamples: cmdLang.description.exemples,",
        "    \t\toptions: [",
        "    \t\t\t{",
        "    \t\t\t\ttype: ApplicationCommandOptionType.String,",
        "    \t\t\t\tname: 'command',",
        "    \t\t\t\tdescription: cmdLang.slashOptions.optionName,",
        "    \t\t\t\trequired: true,",
        "    \t\t\t\tautocomplete: true,",
				"    \t\t\t},",
        "    \t\t],",
        "    \t\t// channel : '', //* Default Channel is GUILD",
        "    \t\t// cooldown : , //* Default cooldown set at 2sec",
        "    \t\tadminsOnly: true, //* Default value is false",
        "    \t\t//userPermissions : [],",
        "    \t\t//clientPermissions : []",
        "    \t});",
        "    }",
        "    execute(i: CommandInteraction) {",
        "    \tthis.client.emit('CommandLog', i);",
        "",
        "    \ti.reply(",
        "    \t\t{",
        "               content:'$2',",
        "            }",
        "    \t);",
        "    }",
        "onAutocomplete(i: AutocompleteInteraction) {",
        "  const focusedOption = i.options.getFocused(true);",
        "  let choices: Array<string>;",
        "",
        "  if (focusedOption.name === 'file-date') {",
        "    choices = [",
        "    ] as string[];",
        "  }",
        "",
        "  const filtered = choices!",
        "    .filter((choice: any) =>",
        "    choice.startsWith(focusedOption.value),",
        "  )",
        "    .slice(0, 25);",
        "  i.respond(filtered.map((choice: any) => ({ name: choice, value: choice })));",
        "}",
        "}",
        ""
      ],
	},
	"addLang": {
		"scope": "json",
		"prefix": "AddLang",
		"body": [
			"\"$1\": {",
      "  \"embed\": {",
      "      \"title\": \"\",",
      "      \"color\": \"#\",",
      "      \"footer\": \"\",",
      "      \"fields\": [{",
      "          \"name\": \"\",",
      "          \"value\": \"\"",
      "      }],",
      "      \"author\": {",
      "          \"name\": \"\",",
      "          \"url\": \"\"",
      "      }",
      "  },",  
      "  \"slashOptions\": {",
      "    \"optionName\": \"optionName\"",
      "  },",
      "  \"description\": {",
      "      \"desc\": \"$2\",",
      "      \"usage\": \"$1\",",
      "      \"exemples\": [",
      "          \"$1\"",
      "      ]",
      "  }",
      "},",
		],
		"description": "Permet de crée une nouvelle entrée dans le fichier de langue"
	}
}