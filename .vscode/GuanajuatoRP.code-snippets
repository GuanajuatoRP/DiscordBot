{
	// Place your espace de travail GuanajuatoRP snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create Listener": {
		"scope": "javascript,typescript",
		"prefix": "NewEvent",
		"body": [
			"import { Event } from \"sheweny\"",
            "import type { ShewenyClient } from \"sheweny\"",
            "import type { TextChannel } from \"discord.js\"",
            "import { LogsEmbed } from \"../util/export\"",
            "import lang from '../util/language.json'",
            "const eventLang = lang.event",
            "import appConf from \"../util/appConfig.json\"",
            "",
            "export class $1 extends Event {",
            "    constructor(client: ShewenyClient) {",
            "        super(client, \"$2\", {",
            "            description: \"$3\",",
            "            once: false,",
            "        });",
            "    }",
            "",
            "    execute($4) {",
            "        console.log('EVENT');",
            "    }",
            "}"
		],
		"description": "Permet de crée un nouvel event"
	},
	"CreateCommand": {
		"scope": "javascript,typescript",
		"prefix": "NewCommand",
		"body": [
			"import { Command } from 'sheweny'",
            "    import type { ShewenyClient } from 'sheweny'",
            "    import type { CommandInteraction } from 'discord.js'",
            "    import lang from '../../../util/language.json'",
            "    const $2Lang = lang$3",
            "    ",
            "    ",
            "    ",
            "    export class $1Command extends Command {",
            "        constructor(client: ShewenyClient) {",
            "            super(client, {",
            "                name: '$2',",
            "                // category: '', //* Default category is InDev",
            "                // type: '', //* Default type is SLASH_COMMAND",
            "                description: $2Lang.description.desc,",
            "                usage : $2Lang.description.usage,",
            "                examples : $2Lang.description.exemples,",
            "                options : [",
            "                    // {",
            "                        // type : 'STRING',",
            "                        // name: 'commande',",
            "                        // description: '',",
            "                        // autocomplete : false,",
            "                        // required : false,",
            "                        //}",
            "                ],",
            "                defaultPermission : true,",
            "                // channel : '', //* Default Channel is GUILD",
            "                // cooldown : , //* Default cooldown set at 2sec",
            "                adminsOnly : true, //* Default value is false ",
            "                //userPermissions : [],",
            "                //clientPermissions : []",
            "            });",
            "        }",
            "        execute(interaction : CommandInteraction) {",
            "            ",
            "            return interaction.reply({",
            "                content : '$4'",
            "            }) ",
            "        }",
            "",
            "    onAutocomplete(interaction: AutocompleteInteraction) {",
            "        const focusedOption = interaction.options.getFocused(true);",
            "        let choices : any;",
            "    ",
            "        if (focusedOption.name === \"name\") {",
            "            choices = [\"faq\", \"install\", \"collection\", \"promise\", \"debug\"];",
            "        }",
            "    ",
            "        if (focusedOption.name === \"theme\") {",
            "            choices = [\"halloween\", \"christmas\", \"summer\"];",
            "        }",
            "    ",
            "        const filtered = choices!.filter((choice: any) =>",
            "            choice.startsWith(focusedOption.value)",
            "        );",
            "        interaction",
            "            .respond(filtered.map((choice: any) => ({ name: choice, value: choice })))",
            "    }",
            "    }"
		],
		"description": "Permet de crée une nouvelle commande"
	}
}